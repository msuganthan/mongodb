msuganthan@msuganthan-TECRA-C50-C:/home$ mongo
MongoDB shell version: 2.6.10
connecting to: test
> use test
switched to db test
> function times2(num) {
... return num*2
... }
> times2(5)
10
> show dbs
admin  (empty)
local  0.078GB
sugu   0.078GB
> db
test
> suganthan = { "name" : "Suganthan",
... "position": "Programmer",
... "email": "sugu@gmail.com",
... "hiredate": new Date()}
{
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z")
}
> db.test.insert(suganthan)
WriteResult({ "nInserted" : 1 })
> db.test.find()
{ "_id" : ObjectId("57d2006edd993b5d5227481c"), "name" : "Suganthan", "position" : "Programmer", "email" : "sugu@gmail.com", "hiredate" : ISODate("2016-09-09T00:20:50.029Z") }
> db.test.find().pretty
function (){
    this._prettyShell = true;
    return this;
}
> db.test.find().pretty()
{
	"_id" : ObjectId("57d2006edd993b5d5227481c"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z")
}
> suganthan.references = []
[ ]
> db.test.update({"name: "Suganthan"}, suganthan)
2016-09-09T05:53:59.570+0530 SyntaxError: Unexpected identifier
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d2006edd993b5d5227481c"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ]
}
> db.test.remove({"name": "Suganthan"})
WriteResult({ "nRemoved" : 1 })
> db.test.find().pretty()
> suganthan.grades = ["a", "b", "c", 123]
[ "a", "b", "c", 123 ]
> db.test.insert(suganthan)
WriteResult({ "nInserted" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d20384dd993b5d5227481d"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ],
	"grades" : [
		"a",
		"b",
		"c",
		123
	]
}
> suganthan.number = 1
1
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d20384dd993b5d5227481d"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ],
	"grades" : [
		"a",
		"b",
		"c",
		123
	],
	"number" : 1
}
> suganthan.boolean = true
true
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> suganthan.null = null
null
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d20384dd993b5d5227481d"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ],
	"grades" : [
		"a",
		"b",
		"c",
		123
	],
	"number" : 1,
	"boolean" : true,
	"null" : null
}
> suganthan.addressRegex = /^[A-Z]{5,10}$/
/^[A-Z]{5,10}$/
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d20384dd993b5d5227481d"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ],
	"grades" : [
		"a",
		"b",
		"c",
		123
	],
	"number" : 1,
	"boolean" : true,
	"null" : null,
	"addressRegex" : /^[A-Z]{5,10}$/
}
> suganthan.embedded = {"name": "Madhavan"}
{ "name" : "Madhavan" }
> db.test.update({"name": "Suganthan"}, suganthan)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.test.find().pretty()
{
	"_id" : ObjectId("57d20384dd993b5d5227481d"),
	"name" : "Suganthan",
	"position" : "Programmer",
	"email" : "sugu@gmail.com",
	"hiredate" : ISODate("2016-09-09T00:20:50.029Z"),
	"references" : [ ],
	"grades" : [
		"a",
		"b",
		"c",
		123
	],
	"number" : 1,
	"boolean" : true,
	"null" : null,
	"addressRegex" : /^[A-Z]{5,10}$/,
	"embedded" : {
		"name" : "Madhavan"
	}
}
> help
	db.help()                    help on db methods
	db.mycoll.help()             help on collection methods
	sh.help()                    sharding helpers
	rs.help()                    replica set helpers
	help admin                   administrative help
	help connect                 connecting to a db help
	help keys                    key shortcuts
	help misc                    misc things to know
	help mr                      mapreduce

	show dbs                     show database names
	show collections             show collections in current database
	show users                   show users in current database
	show profile                 show most recent system.profile entries with time >= 1ms
	show logs                    show the accessible logger names
	show log [name]              prints out the last segment of log in memory, 'global' is default
	use <db_name>                set current database
	db.foo.find()                list objects in collection foo
	db.foo.find( { a : 1 } )     list objects in foo where a == 1
	it                           result of the last line evaluated; use to further iterate
	DBQuery.shellBatchSize = x   set default number of items to display on shell
	exit                         quit the mongo shell
> db.test.find
function ( query , fields , limit , skip, batchSize, options ){
    var cursor = new DBQuery( this._mongo , this._db , this ,
                        this._fullName , this._massageObject( query ) , fields , limit , skip , batchSize , options || this.getQueryOptions() );

    var connObj = this.getMongo();
    var readPrefMode = connObj.getReadPrefMode();
    if (readPrefMode != null) {
        cursor.readPref(readPrefMode, connObj.getReadPrefTagSet());
    }

    return cursor;
}

